https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html

Find social media icon at the bottom of the homepage.
Click inspect element on it and see that there is a redirect:
    http://<ip_address>/index.php?page=redirect&site=facebook
Change 'facebook' to 'mysite' (or anything else):
    http://<ip_address>/index.php?page=redirect&site=mysite
et voil√†

FIX

- If possibile don't use redirects and forwards. Else:
    - Do not allow the URL as user input for the destination. Else:
        - Ensure that the supplied URL is "valid" (e.g. in your list of valid URLs),
            "appropriate" for the application, and is "authorized" for the user.
        - Force all redirects to first go through a page notifying users that
            they are going off of your site, with the destination clearly 
            displayed, and have them click a link to confirm.
- Where possible, have the user provide short name, ID or token which is
    mapped server-side to a full target URL,
    e.g. "carrot" maps to facebook_url, "jeans" to twitter_url, etc.
    Don't use 1, 2, 3 or something else logical, to avoid introducing
        an enumeration vulnerability where a user could cycle through IDs
        to find all possible redirect targets.
- When attempting to validate and sanitise user-input to determine whether
    the URL is safe, wherever possible you should use a built-in library or
    function to parse the URLs, such as url_has_allowed_host_and_scheme() in Django/Python
